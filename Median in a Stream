#include<queue>
int signum(int a,int b){
	if(a==b){
		return 0;
	}
	if(a<b){
		return -1;
	}
	else{
		return 1;
	}

}
void callMedian(int element,vector<int> & arr,priority_queue<int>&maxi,
	priority_queue<int ,vector<int>,greater<int>> &minheap,int &median){

		switch(signum(maxi.size(),minheap.size())){

			case 0:if(element > median){
				  minheap.push(element);
				  median=minheap.top();
			   }
			   else{
				   maxi.push(element);
				   median=maxi.top();

			   }
			break;
			
			case 1: if(element > median){
				
				minheap.push(element);
				median=(minheap.top() +maxi.top())/2;


			    }
				else{
					minheap.push(maxi.top());
					maxi.pop();
					maxi.push(element);
					median = (maxi.top() +minheap.top())/2;

				}
			break;
			
			case -1 : if(element > median){
				 maxi.push(minheap.top());
				 minheap.pop();
				 minheap.push(element);
				 median=(maxi.top() + minheap.top())/2;

			   }
			   else{
				   maxi.push(element);
				   median=(maxi.top() + minheap.top())/2;
				   }
			break;


		}

	}
vector<int> findMedian(vector<int> &arr, int n){

	 
	
	vector<int> ans;
	priority_queue<int> maxheap;
	priority_queue<int ,vector<int>,greater<int>> minheap;
	int median=-1;

	for(int i=0;i<n;i++){
	
		callMedian(arr[i],arr,maxheap,minheap,median);
		ans.push_back(median);
	}

	return  ans;

}
