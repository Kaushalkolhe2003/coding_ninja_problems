#include <bits/stdc++.h> 

int solve(vector<int> &weight, vector<int> &value, int index, int cap){

	//if like there is only one to steal compare its weight with capacity that is less than or not..
	if(index==0)
	  if(weight[0]<=cap){
		 return value[0];
	   }
	  else{
		  return 0;
		  }

	//2 operation we have to perform 
	
	// 1. Include 
	int include=0;
	if(weight[index]<=cap){
		include=value[index]+solve(weight,value,index-1,cap-weight[index]);
	}
	//2. exclude
	int exclude=0+solve(weight,value,index-1,cap);

	int ans=max(include,exclude);

	return ans;
}
int solve(vector<int> &weight, vector<int> &value, int index, int cap,vector<vector<int>> &dp){

	//if like there is only one to steal compare its weight with capacity that is less than or not..
	if(index==0)
	  if(weight[0]<=cap){
		 return value[0];
	   }
	  else{
		  return 0;
		  }

	// 3 step of dp to checnk dp[][]!=-1;

	if(dp[index][cap]!=-1){
		return dp[index][cap];
	}
	//2 operation we have to perform 


	// 1. Include 
	int include=0;
	if(weight[index]<=cap){
		include=value[index]+solve(weight,value,index-1,cap-weight[index],dp);
	}
	//2. exclude
	int exclude=0+solve(weight,value,index-1,cap,dp);

	dp[index][cap]=max(include,exclude);

	return dp[index][cap];
}
int solveTab(vector<int> &weight, vector<int> &value, int n, int cap){
	//1. create a dp 
	vector<vector<int>> dp(n,vector<int> (cap+1,0));

	//2. base case conversion
	for(int w=weight[0];w<=cap;w++){
		if(w<=cap){
			dp[0][w]=value[0];
		}
		else{
			dp[0][w]=0;
		}
	}

	for(int index=1;index<n;index++){
		for(int w=0;w<=cap;w++){

			int include=0;
			if(weight[index]<=w){
				include=value[index]+dp[index-1][w-weight[index]];
			}

			int exclude=0+dp[index-1][w];

			dp[index][w]=max(include,exclude);
		}



	}
	return dp[n-1][cap];
	
	
}
int solveOpti(vector<int> weight, vector<int> value, int n, int cap) {
    vector<int> prev(cap + 1, 0);
    vector<int> curr(cap + 1, 0);

    // Base case: Initialize for the first item
    for (int w = weight[0]; w <= cap; w++) {
        prev[w] = value[0]; // If we can include the first item, set its value
    }

    // Fill DP table for remaining items
    for (int index = 1; index < n; index++) {
        for (int w = 0; w <= cap; w++) {
            int include = 0;
            if (weight[index] <= w) { // Ensure we can include the item within capacity `w`
                include = value[index] + prev[w - weight[index]];
            }
            int exclude = prev[w]; // Value if we exclude the item

            curr[w] = max(exclude, include); // Choose the better option
        }
        prev = curr; // Move to the next iteration
    }

    return prev[cap]; // Return the maximum value for capacity `cap`
}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	//return solve(weight,value,n-1,maxWeight);
	//create a dp of  n rows and maxweight+1 columns

	// vector<vector<int>> dp (n,vector<int> (maxWeight+1,-1));
	// return solve(weight,value,n-1,maxWeight,dp);
	
	// return solveTab(weight,value,n,maxWeight);

	//optimize space

	return solveOpti(weight,value,n,maxWeight);
}
