#include <bits/stdc++.h> 
long long int solve(vector<int>& valueInHouse){
    long long int  n = valueInHouse.size();
    if (n == 0) return 0;
    if (n == 1) return valueInHouse[0];
    
    long long int  prev2 = valueInHouse[0];
    long long int  prev1 = max(valueInHouse[0], valueInHouse[1]);

    for (int i = 2; i < n; i++) {
        long long int  current = max(prev1, prev2 + valueInHouse[i]);
        prev2 = prev1;
        prev1 = current;
    }

    return prev1;

}
long long int houseRobber(vector<int>& valueInHouse)
{
    int n=valueInHouse.size();
    if(n==1){
        return valueInHouse[0];
    }

vector<int> first;
vector<int> second;
    for(int i=0;i<n;i++){
        if(i!=n-1){
            first.push_back(valueInHouse[i]);
        }
        if(i!=0){
            second.push_back(valueInHouse[i]);
        }
    }
    return max(solve(first),solve(second));
}
