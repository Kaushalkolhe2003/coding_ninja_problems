#include <vector>
using namespace std;

void merge(vector<int> &a, int s, int e, int &count) {
    int mid = s + (e - s) / 2;

    int len1 = mid - s + 1;
    int len2 = e - mid;

    int *first = new int[len1];
    int *second = new int[len2];
    
    // Copy values to the temporary arrays
    int mainarrayindex = s;
    for (int i = 0; i < len1; i++) {
        first[i] = a[mainarrayindex++];
    }

    mainarrayindex = mid + 1;
    for (int j = 0; j < len2; j++) {
        second[j] = a[mainarrayindex++];
    }

    // Merge the two sorted arrays
    int index1 = 0;
    int index2 = 0;
    mainarrayindex = s;

    while (index1 < len1 && index2 < len2) {
        if (first[index1] <= second[index2]) {  // Allow equal elements to maintain stability
            a[mainarrayindex++] = first[index1++];
        } else {
            a[mainarrayindex++] = second[index2++];
            count += len1 - index1;  // Count inversions
        }
    }

    // Copy remaining elements from the first array, if any
    while (index1 < len1) {
        a[mainarrayindex++] = first[index1++];
    }

    // Copy remaining elements from the second array, if any
    while (index2 < len2) {
        a[mainarrayindex++] = second[index2++];
    }

    delete[] first;
    delete[] second;
}

void mergersort(vector<int> &a, int s, int e, int &count) {
    if (s >= e) {
        return;
    }

    int mid = s + (e - s) / 2;

    // Sort the first half
    mergersort(a, s, mid, count);

    // Sort the second half
    mergersort(a, mid + 1, e, count);

    // Merge both halves
    merge(a, s, e, count);
}

int numberOfInversions(vector<int> &a, int n) {
    int count = 0;
    int s = 0;
    int e = a.size() - 1;
    mergersort(a, s, e, count);
    return count;
}
