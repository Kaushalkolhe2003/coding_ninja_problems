#include<unordered_map>
#include<queue>
#include<bits/stdc++.h>

vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	
	unordered_map<int ,list<int> > adj;

	for(auto edge :edges){
		int u=edge.first;
		int v = edge.second;

		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	unordered_map<int,bool> visited;
	unordered_map<int,int> parent;

	queue<int> q;
	q.push(s);

	visited[s]=true;
	parent[s]=-1;

	while(!q.empty()){
		int front =q.front();
		q.pop();
		
		for(auto i : adj[front]){
			if(!visited[i]){
				visited[i]=true;
				parent[i]=front;
				q.push(i);
			}
		}
	}

	//prepare sortest part;
	vector<int> ans;
	ans.push_back(t);
	int currentnode=t;
	while(currentnode!=s){
		currentnode=parent[currentnode];
		ans.push_back(currentnode);

	}

	reverse(ans.begin(),ans.end());
	return ans;

	
}
