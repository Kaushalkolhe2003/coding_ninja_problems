/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 *		Node() : data(0), next(nullptr) {};
 *		Node(int x) : data(x), next(nullptr) {}
 *		Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node* segregateEvenOdd(Node* head) {
    if (head == NULL || head->next == NULL) {
        return head; // No need to segregate if the list is empty or has only one node
    }

    Node* evenStart = NULL;
    Node* evenEnd = NULL;
    Node* oddStart = NULL;
    Node* oddEnd = NULL;

    Node* curr = head;

    while (curr != NULL) {
        if (curr->data % 2 == 0) { // Even node
            if (evenStart == NULL) { // First even node encountered
                evenStart = curr;
                evenEnd = curr;
            } else {
                evenEnd->next = curr;
                evenEnd = evenEnd->next;
            }
        } else { // Odd node
            if (oddStart == NULL) { // First odd node encountered
                oddStart = curr;
                oddEnd = curr;
            } else {
                oddEnd->next = curr;
                oddEnd = oddEnd->next;
            }
        }
        curr = curr->next;
    }

    if (evenStart == NULL || oddStart == NULL) {
        return head; // No even or odd nodes present, return the original list
    }

    evenEnd->next = oddStart; // Connect the even list to the odd list
    oddEnd->next = NULL; // Mark the end of the odd list

    return evenStart; // Return the head of the segregated even-odd list
}
