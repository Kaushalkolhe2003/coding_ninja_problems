/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

class TrieNode{
    public:
     char data;
     TrieNode* children[26];
     bool isterminal;
     
     TrieNode(char ch){
         data=ch;
         for(int i=0;i<26;i++){
             children[i]=NULL;
             
         }
         isterminal=false; 
     }
     
};
class Trie {

public:

    /** Initialize your data structure here. */
    TrieNode *root;
   
     Trie(){
       root= new TrieNode('\0');
      }

    /** Inserts a word into the trie. */
    void insertuntil(TrieNode *root,string word){
       
       if(word.length()==0){
           root->isterminal=true;
           return ;
       }
       
       //words asssumption words will be in capital
       
       int index=word[0] - 'a';
       
       TrieNode *child;
       
       //if present
       if(root-> children[index]!=NULL){
           child=root->children[index];
           
       }
       else{
           child = new TrieNode(word[0]);
           root->children[index]=child;
       }
       
       //recursion
       insertuntil(child,word.substr(1));
      
       
   }

    void insert(string word) {
        insertuntil(root,word);
    }

    /** Returns if the word is in the trie. */
    
    bool searchuntil(TrieNode *root,string word){
       //base case
       if(word.length()==0){
           return root->isterminal;
       }
       
      int index= word[0]-'a';
       TrieNode *child;
       
       //present
       if(root-> children[index] !=NULL){
           child=root->children[index];
           
       }
       //absent
       else{
           return false;
       }
       
       // recursion
       return searchuntil(child,word.substr(1));
   }
   bool search(string word){
       return searchuntil(root,word);
   }


    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool prefixuntil(TrieNode *root,string word){
       //base case
       if(word.length()==0){
           return true;
       }
       
      int index= word[0]-'a';
       TrieNode *child;
       
       //present
       if(root-> children[index] !=NULL){
           child=root->children[index];
           
       }
       //absent
       else{
           return false;
       }
       
       // recursion
       return prefixuntil(child,word.substr(1));
   }

    bool startsWith(string prefix) {
        return  prefixuntil(root,prefix);
    }
};
