#include <bits/stdc++.h> 

int solve(vector<int> &num ,int tar){

    //base case
    if(tar==0){
        return 1;
    }

    if(tar<0){
        return 0;
    }

    int ans=0;
    for(int i=0;i<num.size();i++){
        ans+=solve(num,tar-num[i]);
    }

    return ans;
}
int solvedp(vector<int> &num,int tar,vector<int> &dp){
    if(tar==0){
        return 1;
    }
    if(tar<0){
        return 0;
    }

    if(dp[tar]!=-1){
        return dp[tar];
    }
    int ans=0;
    for(int i=0;i<num.size();i++){
        ans+=solvedp(num,tar-num[i],dp);
    }

    dp[tar]=ans;
    return dp[tar];
}
int solvetab(vector<int> &num,int &tar){
    vector<int> dp(tar+1,0);
        dp[0]=1;

        for(int i=1;i<=tar;i++){

            
            //for num vector
            for(int j=0;j<num.size();j++){

             if(i-num[j]>=0)
                dp[i]+=dp[i-num[j]];
           }
        }

        return dp[tar];
    
}
int findWays(vector<int> &num, int tar)
{
   // return solve(num,tar);

    //using dp
    // int n=num.size();
    // vector<int> dp(tar+1,-1);

    // return solvedp(num,tar,dp);


    return solvetab(num,tar);
}
