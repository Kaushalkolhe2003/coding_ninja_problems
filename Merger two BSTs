/*************************************************************

    Following is the Binary Tree node structure:

    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };

*************************************************************/
void inorder(TreeNode*&root,vector<int> &ans){
    if(root==NULL){
        return;
    }
    inorder(root->left,ans);
    ans.push_back(root->data);
    inorder(root->right,ans);
}
vector<int> merge_array(vector<int> a,vector<int> b){
    vector<int> output(a.size() + b.size());
    int i=0,k=0,j=0;
    while(i< a.size() && j<b.size()){
        if(a[i] < b[j]){
            output[k++]=a[i];
            i++;
        }
        else{
            output[k++]=b[j];
            j++;
        }
    }
    while(i< a.size()){
        output[k++]=a[i];
        i++;
    }
    while(j < b.size()){
        output[k++]=b[j];
        j++;
    }
    return output;
}


vector<int> mergeBST(TreeNode *root1, TreeNode *root2)
{
   vector<int> ans1;
   vector<int> ans2;
   inorder(root1,ans1);
   inorder(root2,ans2);

   return merge_array(ans1,ans2);
 
   


}
