/*************************************************************
    Following is the Binary Serach Tree node structure

    template <typename T>
    class TreeNode
    {
    public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };

*************************************************************/
void inorder(TreeNode<int>* root,vector<int> &in){
    if(root==NULL){
        return ;
        }
        inorder(root->left ,in);
        in.push_back(root->data);
        inorder(root->right,in);
}
TreeNode<int>* inorder_to_BST(int s,int e,vector<int> inorder){
    if(s>e){
        return NULL;
    }
    int mid=s+(e-s)/2;
    TreeNode<int> *root= new TreeNode<int> (inorder[mid]);
    root->left=inorder_to_BST(s,mid-1,inorder);
    root->right=inorder_to_BST(mid+1,e,inorder);

    return root;
}

TreeNode<int>* balancedBst(TreeNode<int>* root) {
  vector<int> ans;
  inorder(root,ans);
  int s=0;
  int e=ans.size()-1;

  return inorder_to_BST(s,e,ans);

}
