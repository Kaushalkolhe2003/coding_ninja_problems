#include <bits/stdc++.h> 
int solve(vector<int> &nums ,int n){
    if(n<0){
        return 0;
    }
    if(n==0){
        return nums[0];
    }
    int incl=solve(nums,n-2)+nums[n];
    int excl=solve(nums,n-1)+0;

    return max(incl,excl);
}
int solveDp(vector<int> &nums,int n,vector<int> &dp){
    if(n<0){
        return 0;
    }
    if(n==0){
        return nums[0];
    }
    if(dp[n]!=-1){
        return dp[n];
    }
    int incl=solveDp(nums,n-2,dp)+nums[n];
    int excl=solveDp(nums,n-1,dp)+0;

    dp[n]= max(incl,excl);

    return  dp[n];
}
int solveTB(vector<int> &nums){
    int n=nums.size();
    if(n==0){
        return 0;
    }
    if(n==1){
        return nums[0];
    }
    //create a dp
    vector<int> dp(n,-1);

    //initizlize value of dp[0];
    dp[0]=nums[0];

    dp[1]=max(nums[0],nums[1]);

    for(int i=2;i<n;i++){
        dp[i]=max(dp[i-1],dp[i-2]+nums[i]);

    }

    return dp[n-1];
}
int solvespaceopti(vector<int> &nums){
    int n = nums.size();
    
    // Directly handle the cases where n is less than 2
    if (n == 1) return nums[0];  // Directly return the single element if only one is present

    // Initialize prev2 and prev1
    int prev2 = nums[0];
    int prev1 = std::max(nums[0], nums[1]);
    
    // Iterate from the third element to the end
    for (int i = 2; i < n; ++i) {
        int current = std::max(prev1, prev2 + nums[i]);
        // Update prev2 and prev1 for the next iteration
        prev2 = prev1;
        prev1 = current;
    }
    
    // The result is in prev1
    return prev1;
}
int maximumNonAdjacentSum(vector<int> &nums){
    // int n=nums.size();
    // int ans=solve(nums,n-1);

    // return ans;

    // //using dp
    // int n=nums.size();
    // vector<int> dp(n,-1);
    // return solveDp(nums,n-1,dp);


    //using tabulation 
    // return solveTB(nums);

    //space optimization

    return solvespaceopti(nums);
    
}
