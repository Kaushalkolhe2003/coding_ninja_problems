#include <bits/stdc++.h> 
#include<queue>
class Node{
    public:
    int data;
    int i;
    int j;
    Node (int data,int row,int col){
        this->data=data;
        i=row;
        j=col;
    }
};
class compare{
    public:
    bool operator()(Node*a,Node *b){
        return a->data > b->data;
    }
};
vector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)
{
    
    //define a priority queue
    priority_queue<Node *,vector<Node*>,compare> minheap;

    //step1 add first k array element
    for(int i=0;i<k;i++){
        Node *temp= new Node(kArrays[i][0],i,0);
        minheap.push(temp);

    }
    vector<int> ans;
    while(minheap.size() > 0){
        Node *add= minheap.top();
        ans.push_back(add->data);
        minheap.pop();

        int i=add->i; 
        int j=add->j;
        if(j+1 < kArrays[i].size()){
            Node * next = new Node(kArrays[i][j+1],i,j+1);
            minheap.push(next);
        }


    }
    return ans;
}
