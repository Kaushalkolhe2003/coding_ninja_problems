/*************************************************************
    Following is the Binary Tree node structure

    template <typename T>
    class BinaryTreeNode
    {
    public:
        T data;
        BinaryTreeNode<T> *left, *right;
        BinaryTreeNode() : data(0), left(NULL), right(NULL) {}
        BinaryTreeNode(T x) : data(x), left(NULL), right(NULL) {}
        BinaryTreeNode(T x, BinaryTreeNode<T> *left, BinaryTreeNode<T> *right) : data(x), left(left), right(right) {}
    };

*************************************************************/
BinaryTreeNode<int>* get_mini(BinaryTreeNode<int>* root){
    BinaryTreeNode<int>* temp=root;
    while(temp->left){
        temp=temp->left;
    }
    return temp;
}
BinaryTreeNode<int>* deleteNode(BinaryTreeNode<int>* root, int key) {
   if(root==NULL){
       return root;
   }
   if(root->data==key){
       //0 child
       if(root->left==NULL && root->right==NULL){
           delete root;
           return NULL;
       }


       //1 child
       
       //one child left 
       if(root->left!=NULL && root->right==NULL){
           BinaryTreeNode<int> *temp=root->left;
           delete root;
           return temp;
       }
       //one child right 
       if(root->left==NULL && root->right!=NULL){
           BinaryTreeNode<int> *temp=root->right;
           delete root;
           return temp;
       }

       //2 child
       if(root->left!=NULL && root->right!=NULL){
           int mini=get_mini(root->right)->data;
           root->data=mini;
           root->right=deleteNode(root->right,mini);
           return root;
       }

   }
   else if(root->data > key){
       root->left=deleteNode(root->left,key);
       return root;
   }
   else{
       root->right=deleteNode(root->right,key);
       return root;
   }
}
