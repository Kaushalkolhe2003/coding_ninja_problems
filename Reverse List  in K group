/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */
#include<stack>
Node* kReverse(Node* head, int k) {
    if(head==NULL || k==1){
        return head;
    }
    Node * dummy= new Node(0);
    dummy->next=head;
    Node *prev=dummy;
    Node *curr=head;

    int count=0;
    stack<Node *> stk;
    while(curr != NULL){
        count++;
        stk.push(curr);
        curr=curr->next;

        if(count==k){
            Node * temp=prev->next;

            while(!stk.empty()){
                prev->next=stk.top();
                stk.pop();
                prev=prev->next;

            }
            prev->next=curr;
            temp=prev;
            count=0;

        }


    }
    return dummy->next;
}
