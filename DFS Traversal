
void dfs(int node,unordered_map<int,bool> &visited,unordered_map<int,list<int>> &adj, vector<int> &component){

    //Ans Store
    component.push_back(node);
    visited[node] = 1;
    for(auto i : adj[node]){

        if(!visited[i]){ 
            dfs(i,visited,adj,component);
        }

    }

}

 

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)

{

    // Step 1 Prepare Adjacency List
    unordered_map<int,list<int>> adj;
    //         Traverse the Edges
    for(int i = 0; i < E; i++){
        int u = edges[i][0];
        int v = edges[i][1];



        //Making Edge

        adj[u].push_back(v);
        adj[v].push_back(u);

    }

    vector<vector<int>> ans;

 

    unordered_map<int,bool> visited;

 

    //V is the Number of Vertex Present in the Graph

    //For all Nodes call Dfs , if not visited

    for(int i = 0; i< V; i++){

        if(!visited[i]){

            vector<int> component;

            dfs(i, visited, adj, component);

            ans.push_back(component);

        }

    }

    return ans;

}
