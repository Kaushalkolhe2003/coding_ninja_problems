#include <bits/stdc++.h> 
/*************************************************************
    
    Following is the Binary Tree node structure:

	class BinaryTreeNode {
		
	public :
		int data;
		BinaryTreeNode* left;
		BinaryTreeNode* right;

		BinaryTreeNode(int data) {
		this -> left = NULL;
		this -> right = NULL;
		this -> data = data;
		}
	};

*************************************************************/
void heapify(vector<int>& ans,int n,int i){
	int smallest=i;
	int left=2*i+1;
	int right=2*i+2;

	if(left < n && ans[left]<ans[smallest]){
		smallest=left;
	}
	if(right < n && ans[right] < ans[smallest]){
		smallest=right;
	}
	if(smallest!=i){
		swap(ans[smallest],ans[i]);
		heapify(ans,n,smallest);
		
	}

	
}
void tree_from_preorder(BinaryTreeNode *&root,vector<int> &preorder,int &i){
	if(root==NULL){
		return ;
	}
	root->data =preorder[i++];               //N<L<R0
	tree_from_preorder(root->left,preorder,i);
	tree_from_preorder(root->right,preorder,i);
	
}
void inorder(BinaryTreeNode *root,vector<int> & ans){
	if(root==NULL){
		return ;
	}
	inorder(root->left,ans);
	ans.push_back(root->data);
	inorder(root->right,ans);
}
BinaryTreeNode* convertBST(BinaryTreeNode* root)
{

	vector<int> ans;
	inorder(root,ans);
	int n=ans.size();
	for(int i=n/2-1;i>=0;i--){
		heapify(ans,n,i);
	}
	int i=0;
	tree_from_preorder(root,ans,i);
	return root;

}
